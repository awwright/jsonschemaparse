<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" version="XHTML+RDFa 1.0" dir="ltr">
<head>
	<meta http-equiv="Content-Type" content="application/xhtml+xml;charset=utf-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1"/>
	<title>Usage | jsonschemaparse</title>
	<link rel="stylesheet" href="style.css"/>
	<link rel="prev" href="index.xhtml"/>
	<link rel="next" href="api.xhtml"/>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/styles/default.min.css"/>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.1.2/highlight.min.js"></script>
	<script type="application/ecmascript">hljs.initHighlightingOnLoad();</script>
</head>
<body class="pagewidth">
	<div class="site-header">
		<header>
			<ul>
				<li><h1><a href="index.xhtml">jsonschemaparse</a></h1></li>
				<li class="active"><a href="usage.xhtml">Usage</a></li>
				<li><a href="api.xhtml">API</a></li>
				<li><a href="demo.xhtml">demo</a></li>
			</ul>
			<ul id="ext-links">
				<li><a href="https://www.npmjs.com/package/jsonschemaparse">npm</a></li>
				<li><a href="https://yarnpkg.com/package/jsonschemaparse">Yarn</a></li>
				<li><a href="https://github.com/awwright/jsonschemaparse">GitHub</a></li>
			</ul>
		</header>
	</div>
	<main>
		<h1>Usage</h1>

		<section id="usage-calling-the-parser">
			<h2>Calling the parser</h2>
			<p>
				Three different options for parsing are available:
			</p>
			<ul>
				<li><code>lib.parse(json, options)</code>, for parsing the value of a complete JSON document (similar to JSON.parse);</li>
				<li><code>lib.parseInfo(json, options)</code>, for parsing the value and metadata of a complete JSON document; or</li>
				<li><code>new lib.StreamParser(options)</code>, for streaming a JSON document.</li>
			</ul>
			<p>The options argument allows you to configure the syntax, validation, and the information that will be read.</p>
		</section>

		<section>
			<h3>Get a value from a JSON document</h3>
			<p>The <a href="api.xhtml#api-route">parse</a> function may be used with all the same functionality as the ECMAScript builtin <code>JSON.parse</code>:</p>
			<pre><code>
const value = lib.parse('true');
assert(value === true);
</code></pre>
		</section>

		<section>
			<h3>Tokenize a JSON document or get information about how its written</h3>
			<p>The <a href="api.xhtml#api-route">parseInfo</a> function may be used like the <code>parse</code> function, but instead, it returns an object that has the document's parsed value as well as metadata including character position information, and annotations such as descriptions for each property. This is useful for cases like code completion.</p>
			<pre><code>
const info = lib.parseInfo('true', schema);
assert(info.value === true);
assert(info.description === 'Indicates if the switch is on');
</code></pre>
		</section>

		<section>
			<h3>Stream parse a JSON document</h3>
			<p>The <a href="api.xhtml#api-route">StreamParser</a> constructor may be used to create a streaming parser.</p>
			<pre><code>
const parser = new lib.StreamParser({
	parseValue: true,
	schema: { type: 'array', items: { type: 'string' } },
});
fs.createReadStream('largefile.json').pipe(parser);
parser.on('end', function(){
	if(parser.errors.length) console.error(parser.errors.join('\n'));
	console.log(parser.value);
});
</code></pre>
		</section>

		<section>
			<h2>Validating &amp; Parsing a Schema</h2>

			<h3>Invalid keywords</h3>
			<p>
				<code>Schema</code> instances are created from a native object, and validated when they are created.
			</p>
			<pre><code>
const schema = new lib.Schema({
	type: 'array',
	items: { type: 'string' },
});
</code></pre>
			<p>
				If there are any "fatal" errors, that prevent it from validating an instance, these will be thrown as an Error.
			</p>
			<pre><code>
// This will throw an Error
new lib.Schema({
	minLength: -1,
});
</code></pre>	

			<h3>Unknown keywords</h3>
			<p>
				Unknown keywords do not emit an error by default. If there are any keywords not known,
			</p>
			<p>
				The <code>allUnknown</code> keyword not only looks at the current schema, but all subschemas (except through references).
			</p>
<pre><code>
console.log(schema.unknown.join('\n'));
console.log(schema.allUnknown.join('\n'));
</code></pre>

			<h3>Listing References</h3>
			<p>
				All <code>$ref</code> references are stored in the <code>references</code> property as an array.
			</p>
			<p>
				The <code>allReferences</code> property is an array of references not just in the current schema, but all subschemas (except through references).
			</p>
<pre><code>
console.log(schema.references.join('\n'));
console.log(schema.allReferences.join('\n'));
</code></pre>
		</section>

		<section>
			<h3>Unresolved references</h3>
			<p>
				Additionally, all <code>$ref</code> references must be resolved at the time it is used. To get a list of unresolved references, read the <code>Schema#unknown</code> array:
			</p>
<pre><code>
console.log(schema.registry.unresolvedReferences.join('\n'));
</code></pre>
		</section>

		<section>
			<h2>Reporting Validation Errors</h2>
			<p>
				When a JSON document is parsed using the <code>schema</code> option, it will validate the incoming JSON against the schema:
			</p>
			<pre><code>
lib.parse(json, { schema });
lib.parseInfo(json, { schema });
new lib.StreamParser({ schema });
</code></pre>
			<p>
				When using <code>lib.parse</code>, the validation error will be thrown.
			</p>
			<p>
				When using the other forms, by default, validation error will be added to the <code>errors</code> array.
			</p>
		</section>

		<section>
			<h2>Migrating from other parsers</h2>

			<h3>ECMAScript builtin JSON.parse</h3>
			<p>Use <code>lib.parse</code> as a drop-in replacement for <code>JSON.parse</code>.</p>
			<p>This library only parses, so there is no equivalent to <code>JSON.stringify</code>.</p>

			<h3>JSON5</h3>
			<p>Homepage: <a href="https://github.com/json5/json5">https://github.com/json5/json5</a></p>
			<p>JSON5 is a library that supports a superset of the JSON syntax, with a JSON.parse compatible API.</p>
			<p>In place of <code>JSON5.parse</code>, use <code>lib.parse</code> as follows:</p>
			<pre><code>const JSON5opts = {
	syntaxUnquotedKeys: true,
	syntaxTrailingComma: true,
	syntaxSingleQuote: true,
	syntaxEscapeLF: true,
	syntaxHexadecimal: true,
	syntaxBareDecimal: true,
	syntaxInf: true,
	syntaxNaN: true,
	syntaxPlus: true,
}
const parsed = lib.parse(text, JSON5Opts);
</code></pre>
			<p>If you need the reviver function, add a "reviver" property to the options.</p>
			<p>This library only parses, so there is no equivalent to <code>JSON5.stringify</code>.</p>

			<h3>JSONStream</h3>

			<h3>Clarinet.js</h3>
			<p>Homepage: <a href="https://github.com/dscape/clarinet">https://github.com/dscape/clarinet</a></p>
			<p>Clarinet is a SAX-like streaming parser for JSON.</p>

			<h3>Oboe.js</h3>
			<p>Homepage: <a href="http://oboejs.com/" rel="nofollow">http://oboejs.com/</a></p>
			<p>Oboe.js is a streaming parser for JSON, derived from Clarinet, that supports retrieval over the network, and an API to split a (potentially very large) document into subdocuments, for easier processing by the application.</p>
			<p>This library does not perform any network or filesystem functions; get a readable stream, somehow, and pipe it into a . For example in Node.js, use <code>fs.createReadStream</code>.</p>
		</section>

	</main>
	<footer>
		<a rel="prev" href="index.xhtml">Previous: Introduction</a>
		<a rel="next" href="api.xhtml">Next: API</a>
	</footer>
</body>
</html>
